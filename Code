import numpy as np
import pandas as pd
class Perceptron(object):
    epochs=10
    lr=0
    
    def __init__(self, input_size, lr=0.1, epochs=10):
        
        self.W = np.zeros(input_size)
                          
        self.epochs = epochs
        self.lr = lr
    
    def activation_function(self, z):
        #sigmoid
        act=1/(1+np.exp(-z))
        return act
 
    def predict(self, x):
      
        z = self.W.T.dot(x)
        a = self.activation_function(z)
        return a
 
    def fit(self, X, d):
        for j in range(self.epochs):
            for i in range(d.shape[0]):
                
                #ypred
                y = self.predict(X[i])
                #loss
                e = d[i] - y
                #weight update
                self.W = self.W + self.lr * e * X[i]
                
if __name__ == '__main__':
    df=pd.read_csv('data6.csv',header=None)
    X=np.array(df.iloc[:,:-1].values)
    print(X.shape)
    y= np.array(df.iloc[:,-1].values)
    perceptron = Perceptron(input_size=8)
    perceptron.fit(X, y)
    df_test=pd.read_csv("test6.csv",header=None)
    X_test=np.array(df_test.iloc[:,:].values)
    
    for value in X_test:
        
        if(perceptron.predict(value)>0.5):
        
            print(1)
        
        else:
        
            print(0)
        
